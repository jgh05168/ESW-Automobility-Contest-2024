///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : lidardata.cpp
/// SOFTWARE COMPONENT NAME           : LidarData
/// GENERATED DATE                    : 2024-11-07 14:01:17
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <vector>
#include <memory>
#include <chrono>
#include <thread>
#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <string.h>
#include <unistd.h>

#include "sl_lidar.h" 
#include "sl_lidar_driver.h"

#include "lidar/aa/port/lidardata.h"
 
using namespace sl;
 
namespace deepracer
{
namespace service
{
namespace lidardata
{
namespace skeleton
{
 
SvLidarDataSkeletonImpl::SvLidarDataSkeletonImpl(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode)
    : SvLidarDataSkeleton(instanceSpec, mode)
    , m_logger(ara::log::CreateLogger("LID", "PORT", ara::log::LogLevel::kVerbose))
{
}
 
} /// namespace skeleton
} /// namespace lidardata
} /// namespace service
} /// namespace deepracer

namespace lidar
{
namespace aa
{
namespace port
{
 
LidarData::LidarData()
    : m_logger(ara::log::CreateLogger("LID", "PORT", ara::log::LogLevel::kVerbose))
    , m_running{false}
    , m_LEventData{0LL, {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f}}
{
}

LidarData::~LidarData()
{
}
 
void LidarData::Start()
{
    m_logger.LogVerbose() << "LidarData::Start";
    
    // construct skeleton
    ara::core::InstanceSpecifier specifier{"Lidar/AA/LidarData"};
    m_interface = std::make_shared<deepracer::service::lidardata::skeleton::SvLidarDataSkeletonImpl>(specifier);
    
    // offer service
    auto offer = m_interface->OfferService();
    if (offer.HasValue())
    {
        m_running = true;
        m_logger.LogVerbose() << "LidarData::Start::OfferService";
    }
    else
    {
        m_running = false;
        m_logger.LogError() << "LidarData::Start::OfferService::" << offer.Error().Message();
    }
}

void LidarData::Terminate()
{
    m_logger.LogVerbose() << "LidarData::Terminate";
    
    // stop port
    m_running = false;
    
    // stop offer service
    m_interface->StopOfferService();
    m_logger.LogVerbose() << "LidarData::Terminate::StopOfferService";
}
 
void LidarData::produceScanning() {
    m_logger.LogVerbose() << "LidarData::Start::produceScanning";
    const char* dev = "/dev/ttyUSB0";
    uint32_t baudrate = 115200;
    unsigned int op_result;

    // 드라이버 인스턴스 생성
	ILidarDriver * drv = *createLidarDriver();
    if (!drv) {
        m_logger.LogError() << "LidarData::Insufficient memory for Lidar driver";
    }else{
        m_logger.LogError() << "LidarData::Lidar 인스턴스 생성 성공";
    }
    // 장치 연결
    IChannel* channel = *createSerialPortChannel(dev, baudrate);
    auto res = drv->connect(channel);
    if (!SL_IS_OK(res)) {
        m_logger.LogError() << "LidarData::Failed to connect to Lidar device";
    }else{
        m_logger.LogError() << "LidarData::Lidar 장치 연결 성공";
    }

    // scan data 및 존별 최소 거리 초기화
    deepracer::service::lidardata::skeleton::events::LEvent::SampleType scan_data;
    scan_data.lidar_data = {9999.0f, 9999.0f, 9999.0f, 9999.0f, 9999.0f, 9999.0f, 9999.0f, 9999.0f};

    // 스캔 시작
    drv->setMotorSpeed();
    std::this_thread::sleep_for(std::chrono::milliseconds(5000));
    
    drv->startScan(0,1);
    auto scan_result = drv->startScan(0, 1);
    if (!SL_IS_OK(scan_result)) {
        m_logger.LogError() << "LidarData::Failed to start scan, Error Code: " << scan_result;
    }else{
        m_logger.LogVerbose() << "LidarData::Scan started successfully, Code: " << scan_result;
    }
    

    while (1) {
        sl_lidar_response_measurement_node_hq_t nodes[8192];
        size_t count = sizeof(nodes) / sizeof(sl_lidar_response_measurement_node_hq_t);

        // 데이터 캡처
        op_result = drv->grabScanDataHq(nodes, count);
        m_logger.LogError() << op_result;
        if (!SL_IS_OK(op_result)){
            m_logger.LogError() << "LidarData::grab 실패>>grab 재시도";
            drv->startScan(0,1);
        }
        if (SL_IS_OK(op_result)) {
            drv->ascendScanData(nodes, count);

            for (size_t pos = 0; pos < (uint32_t)count; ++pos) {
                //앵글 센싱
                float theta = (nodes[pos].angle_z_q14 * 90.f) / 16384.f;
                // 각도에 따른 존 할당
                uint32_t zone;
                if (theta >= 40.0 && theta < 75.0) {
                    zone = 0; // 존1
                } else if (theta >= 75.0 && theta < 110.0) {
                    zone = 1; // 존2
                } else if (theta >= 110.0 && theta < 145.0) {
                    zone = 2; // 존3
                } else if (theta >= 145.0 && theta < 180.0) {
                    zone = 3; // 존4
                } else if (theta >= 180.0 && theta < 215.0) {
                    zone = 4; // 존5
                } else if (theta >= 215.0 && theta < 250.0) {
                    zone = 5; // 존6
                } else if (theta >= 250.0 && theta < 285.0) {
                    zone = 6; // 존7
                } else if (theta >= 285.0 && theta < 320.0) {
                    zone = 7; // 존8
                } else {
                    continue; // 범위 밖 데이터 무시
                }

                // 거리 센싱
                float dist = nodes[pos].dist_mm_q2 / 4.0f;
                //m_logger.LogVerbose() << "존: " << zone << ", 현재 거리: " << dist;
                if (dist == 0) continue; // 거리가 0인 데이터는 무시
                // 해당 존에 최소 거리 업데이트
                if (dist < scan_data.lidar_data[zone]) {
                    scan_data.lidar_data[zone] = dist;
                    //m_logger.LogVerbose() << "LidarData::존 " << zone << "의 최소 거리 업데이트: " << scan_data.lidar_data[zone];
                }
            } 
        }
        // m_LEventData에 업데이트
        scan_data.timestamp = getCurrentTimestamp();
        WriteDataLEvent(scan_data);
    }
}

int64_t LidarData::getCurrentTimestamp() const {
    using namespace std::chrono;
    return duration_cast<milliseconds>(system_clock::now().time_since_epoch()).count();
}

void LidarData::WriteDataLEvent(const deepracer::service::lidardata::skeleton::events::LEvent::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_LEventData = data;
}

void LidarData::SendEventLEventCyclic()
{
    while (m_running)
    {
        {
            std::lock_guard<std::mutex> lock(m_mutex);
            auto send = m_interface->LEvent.Send(m_LEventData);
            if (send.HasValue())
            {
                m_logger.LogVerbose() << "Cyclic::Send"
                //<<m_LEventData.lidar_data[1];
                <<m_LEventData.lidar_data.size()
                <<m_LEventData.lidar_data[0]
                <<m_LEventData.lidar_data[1]
                <<m_LEventData.lidar_data[2]
                <<m_LEventData.lidar_data[3]
                <<m_LEventData.lidar_data[4]
                <<m_LEventData.lidar_data[5]
                <<m_LEventData.lidar_data[6]
                <<m_LEventData.lidar_data[7]
                <<m_LEventData.timestamp;
            }
            else
            {
                m_logger.LogError() << "Cyclic::Send::Value()없음";
                //<< send.Error().Message();
            }
        }
        std::this_thread::sleep_for(std::chrono::milliseconds(200));
    }
}
 
void LidarData::SendEventLEventTriggered()
{
    std::lock_guard<std::mutex> lock(m_mutex);
    auto send = m_interface->LEvent.Send(m_LEventData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "LidarData::SendEventLEventTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "LidarData::SendEventLEventTriggered::Send::" << send.Error().Message();
    }
}
 
void LidarData::SendEventLEventTriggered(const deepracer::service::lidardata::skeleton::events::LEvent::SampleType& data)
{
    std::lock_guard<std::mutex> lock(m_mutex);
    m_LEventData = data;
    auto send = m_interface->LEvent.Send(m_LEventData);
    if (send.HasValue())
    {
        m_logger.LogVerbose() << "LidarData::SendEventLEventTriggered::Send";
    }
    else
    {
        m_logger.LogError() << "LidarData::SendEventLEventTriggered::Send::" << send.Error().Message();
    }
}

 
} /// namespace port
} /// namespace aa
} /// namespace lidar
 
/// EOF
